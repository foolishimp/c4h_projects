===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor/c4h-micro/packages/shared/src/services/apiService.ts
TYPE: modify
DESCRIPTION: Update submitJobConfigs to call the /api/v1/jobs/multi-config endpoint instead of /api/v1/jobs.
DIFF:
--- a/Users/jim/src/apps/c4h_editor/c4h-micro/packages/shared/src/services/apiService.ts
+++ b/Users/jim/src/apps/c4h_editor/c4h-micro/packages/shared/src/services/apiService.ts
@@ -331,7 +331,7 @@
       user_id: userId || 'current-user',
       job_configuration: jobConfiguration || { max_runtime: 3600, notify_on_completion: true }
     };
-    return this.post<any>('/api/v1/jobs', requestData);
+    return this.post<any>('/api/v1/jobs/multi-config', requestData); // Use the new endpoint
   }
   
   async cancelJob(id: string) {

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor/backend/api/routes/jobs.py
TYPE: modify
DESCRIPTION: Remove the old /api/v1/jobs route handler (create_job) and its associated background task (submit_and_update).
DIFF:
--- a/Users/jim/src/apps/c4h_editor/backend/api/routes/jobs.py
+++ b/Users/jim/src/apps/c4h_editor/backend/api/routes/jobs.py
@@ -287,34 +287,6 @@
         raise HTTPException(status_code=500, detail=f"Failed to get job: {str(e)}")
 
 
-# --- MODIFIED submit_and_update FUNCTION (from previous response - unchanged OK) ---
-async def submit_and_update(job: Job, job_repo: JobRepository, c4h_service: C4HService, request: JobTupleRequest):
-    """Background task to submit job to C4H service and update initial status."""
-    # (Implementation from previous response is correct - only sets SUBMITTED)
-    try:
-        workorder_repo = get_config_repository(request.workorder.config_type)
-        team_repo = get_config_repository(request.team.config_type)
-        runtime_repo = get_config_repository(request.runtime.config_type)
-        if not workorder_repo or not team_repo or not runtime_repo: raise ValueError("Could not get config repositories")
-
-        # Collect all configurations as a list for the direct multi-config submission
-        config_list = []
-        
-        # Add any overrides first (highest priority)
-        if request.overrides:
-            config_list.extend(request.overrides)
-            
-        runtime_config = runtime_repo.get_config(request.runtime.id, request.runtime.version or "latest")
-        if not workorder_config or not team_config or not runtime_config: raise ValueError("Could not load required configs")
-
-        submission = await c4h_service.submit_job(workorder=workorder_config, team=team_config, runtime=runtime_config)
-
-        if submission.status == "error":
-            job.update_status(JobStatus.FAILED); job.result = JobResult(error=submission.message or "Failed to submit job to C4H service")
-            job_repo.update_job(job, add_audit_entry=True); logger.error("jobs.background.submission_failed", extra={"job_id": job.id, "error": submission.message})
-        else:
-            job.service_job_id = submission.job_id; job.update_status(JobStatus.SUBMITTED)
-            job_repo.update_job(job, add_audit_entry=True); logger.info("jobs.background.submitted_to_service", extra={"job_id": job.id, "service_job_id": submission.job_id, "service_status": submission.status})
-    except Exception as e:
-        logger.error("jobs.background.submit_and_update_failed", extra={"job_id": job.id, "error": str(e)}, exc_info=True)
-        try:
-            job.update_status(JobStatus.FAILED); job.result = JobResult(error=f"Background submission failed: {str(e)}")
-            job_repo.update_job(job, add_audit_entry=True)
-        except Exception as repo_err: logger.error("jobs.background.failed_status_update_failed", extra={"job_id": job.id, "repo_error": str(repo_err)})
-
-
 # --- create_job endpoint (uses the modified submit_and_update - unchanged OK) ---
-@router.post("", response_model=JobResponse)
-async def create_job(
-    request: JobTupleRequest, background_tasks: BackgroundTasks,
-    job_repo: JobRepository = Depends(get_job_repository), c4h_service: C4HService = Depends(get_c4h_service) ):
-    # (Implementation from previous response is correct)
-    try:
-        configurations = { rt.config_type: {"id": rt.id, "version": rt.version or "latest"} for rt in [request.workorder, request.team, request.runtime] }
-        required = ["workorder", "teamconfig", "runtimeconfig"]
-        for req in required:
-             if req not in configurations or not configurations[req].get("id"): raise HTTPException(status_code=400, detail=f"Missing/invalid config for: {req}")
-        job = job_repo.create_job(configurations=configurations, user_id=request.user_id, configuration=request.job_configuration)
-        logger.info("jobs.create.record_created", extra={"job_id": job.id, "status": job.status.value})
-        background_tasks.add_task(submit_and_update, job, job_repo, c4h_service, request)
-        configurations_response = { ct: {"id": ref.id, "version": ref.version} for ct, ref in job.configurations.items()}
-        result_dict = job.result.dict() if job.result else None
-        return JobResponse( id=job.id, configurations=configurations_response, status=job.status.value, service_job_id=job.service_job_id, created_at=job.created_at, updated_at=job.updated_at, submitted_at=job.submitted_at, completed_at=job.completed_at, user_id=job.user_id, job_configuration=job.configuration, result=result_dict, changes=None )
-    except ValueError as e: logger.error("jobs.create.validation_error", extra={"error": str(e)}); raise HTTPException(status_code=400, detail=str(e))
-    except Exception as e: logger.error("jobs.create.failed", extra={"error": str(e)}, exc_info=True); raise HTTPException(status_code=500, detail=f"Failed to create job: {str(e)}")
-
-
 @router.post("/multi-config", response_model=JobResponse, summary="Create a job with multiple configurations")
 async def create_job_multi_config(
     request: JobTupleRequest, background_tasks: BackgroundTasks,

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/components/JobCreator.tsx
TYPE: modify
DESCRIPTION: Remove unused axios import.
DIFF:
--- a/Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/components/JobCreator.tsx
+++ b/Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/components/JobCreator.tsx
@@ -13,7 +13,6 @@
 } from '@mui/material';
 import { configTypes, api, JobConfigReference } from 'shared';
 import { useJobContext } from '../contexts/JobContext';
-import axios from 'axios';
 
 interface ConfigOption {
   id: string;

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/contexts/JobContext.tsx
TYPE: modify
DESCRIPTION: Remove unused api and configTypes imports.
DIFF:
--- a/Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/contexts/JobContext.tsx
+++ b/Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/contexts/JobContext.tsx
@@ -2,7 +2,7 @@
 // File: /Users/jim/src/apps/c4h_editor/c4h-micro/packages/job-management/src/contexts/JobContext.tsx
 
 import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';
-import { api, apiService, configTypes } from 'shared';
+import { apiService } from 'shared';
 import { Job, JobStatus, JobConfigReference } from 'shared';
 
 // Context state interface

===CHANGE_END===