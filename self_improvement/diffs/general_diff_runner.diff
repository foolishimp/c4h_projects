===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/backend/config/config_types.py
TYPE: modify
DESCRIPTION: Update get_repo_path to prioritize C4H_BACKEND_REPO_ROOT env var for base path.
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/backend/config/config_types.py
+++ b/Users/jim/src/apps/c4h_editor_aidev/backend/config/config_types.py
@@ -11,6 +11,7 @@
 import json
 import logging
 from pathlib import Path
+import os # Added import
 
 logger = logging.getLogger(__name__)
 
@@ -96,18 +97,35 @@
     
     Returns:
         Path to repository
+        Resolved absolute path to repository
     """
     config_type = get_config_type(type_key)
     if not config_type:
         raise ValueError(f"Invalid configuration type: {type_key}")
         
-    return config_type.get("repository", {}).get("path", f"repositories/{type_key}")
+    # Check environment variable for root path
+    repo_root_env = os.environ.get("C4H_BACKEND_REPO_ROOT")
+
+    if repo_root_env:
+        # Use the environment variable as the base path
+        base_path = Path(repo_root_env)
+        logger.info(f"Using repository root from env var C4H_BACKEND_REPO_ROOT: {base_path}")
+    else:
+        # Fallback to default relative path if env var not set
+        # Assumes the service runs with the project root as the CWD
+        base_path = Path(".")
+        logger.warning("C4H_BACKEND_REPO_ROOT env var not set. Using default relative base path '.'")
+
+    # Get specific path segment from config type definition (e.g., "repositories/workorders")
+    relative_path_str = config_type.get("repository", {}).get("path", f"repositories/{type_key}")
+    relative_path = Path(relative_path_str)
+
+    # Join base path and relative path
+    full_path = base_path / relative_path
+
+    # Ensure the parent directory exists before resolving
+    full_path.parent.mkdir(parents=True, exist_ok=True)
+
+    resolved_path = str(full_path.resolve()) # Return resolved absolute path
+    logger.debug(f"Resolved repo path for {type_key}: {resolved_path}")
+    return resolved_path
===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/backend/dependencies.py
TYPE: modify
DESCRIPTION: Update get_job_repository to prioritize C4H_BACKEND_JOB_PATH env var.
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/backend/dependencies.py
+++ b/Users/jim/src/apps/c4h_editor_aidev/backend/dependencies.py
@@ -6,6 +6,7 @@
 from fastapi import Depends
 from pathlib import Path
 import logging
+import os # Added import
 
 from backend.services.config_repository import ConfigRepository
 from backend.services.job_repository import JobRepository
@@ -38,10 +39,22 @@
 def get_job_repository():
     """Get or create a job repository instance."""
     global _job_repository
+    """Get or create a job repository instance, prioritizing env var."""
+    global _job_repository
     if _job_repository is None:
-        job_path = Path("./data/jobs")
+        # Check environment variable first
+        job_path_env = os.environ.get("C4H_BACKEND_JOB_PATH")
+
+        if job_path_env:
+            job_path = Path(job_path_env)
+            logger.info(f"Using job path from env var C4H_BACKEND_JOB_PATH: {job_path}")
+        else:
+            # Fallback to default relative path
+            # Assumes the service runs with the project root as the CWD
+            job_path = Path("./data/jobs")
+            logger.warning("C4H_BACKEND_JOB_PATH env var not set. Using default relative path './data/jobs'")
+
         job_path.parent.mkdir(exist_ok=True)
-        _job_repository = JobRepository(str(job_path))
-        logger.info(f"Created JobRepository at {job_path}")
+        resolved_path = str(job_path.resolve()) # Resolve to absolute path
+        _job_repository = JobRepository(resolved_path) # Pass resolved path
+        logger.info(f"Created JobRepository at {resolved_path}")
     return _job_repository
 
 def get_c4h_service():
===CHANGE_END===
===CHANGE_BEGIN===
FILE: environments.json
TYPE: modify
DESCRIPTION: Add data_paths sections for main_backend and prefs_service.
DIFF:
--- a/environments.json
+++ b/environments.json
@@ -3,12 +3,22 @@
 {
   "development": {
     "main_backend":  { "url": "http://localhost:8010" },
+    "main_backend": {
+      "url": "http://localhost:8010",
+      "data_paths": {
+        "repositories_root": "/Users/jim/c4h_dev_data/repositories",
+        "jobs_path": "/Users/jim/c4h_dev_data/jobs"
+      }
+    },
     "prefs_service": { "url": "http://localhost:8011" },
-
+    "prefs_service": {
+      "url": "http://localhost:8011",
+      "data_paths": {
+        "database_url": "sqlite:////Users/jim/c4h_dev_data/shell_prefs.db"
+      }
+    },
     "shell":         { "url": "http://localhost:3100" },
-
     "yaml-editor":   { "url": "http://localhost:3105/src/main.tsx" },
-
     "workorder":     { "url": "http://localhost:3101/src/main.tsx" },
     "teamconfig":    { "url": "http://localhost:3101/src/main.tsx" },
     "runtimeconfig": { "url": "http://localhost:3101/src/main.tsx" },
@@ -17,12 +27,22 @@
     "test-app":      { "url": "http://localhost:3106/src/main.tsx" }
   },
   "production": {
+    "main_backend": {
+      "url": "https://api.example.com",
+      "data_paths": {
+        "repositories_root": "/data/prod/c4h/repositories",
+        "jobs_path": "/data/prod/c4h/jobs"
+      }
+    },
     "main_backend":  { "url": "https://api.example.com" },
     "prefs_service": { "url": "https://prefs.example.com" },
-
+    "prefs_service": {
+      "url": "https://prefs.example.com",
+      "data_paths": {
+        "database_url": "postgresql://user:pass@prod-db-host:5432/c4h_prefs"
+      }
+    },
     "shell":         { "url": "https://app.example.com" },
-
     "yaml-editor":   { "url": "https://cdn.example.com/yaml-editor/latest/assets/yaml-editor.js" },
-
     "workorder":     { "url": "https://cdn.example.com/config-selector/latest/assets/config-selector.js" },
     "teamconfig":    { "url": "https://cdn.example.com/config-selector/latest/assets/config-selector.js" },
     "runtimeconfig": { "url": "https://cdn.example.com/config-selector/latest/assets/config-selector.js" },
===CHANGE_END===
===CHANGE_BEGIN===
FILE: start_backends.py
TYPE: modify
DESCRIPTION: Update start_service to set data path env vars and pass json_key in main loop.
DIFF:
--- a/start_backends.py
+++ b/start_backends.py
@@ -158,7 +158,7 @@
 
 
 # --- start_service function remains the same ---
-def start_service(service_name: str, port: int, uvicorn_target: str):
+def start_service(service_name: str, port: int, uvicorn_target: str, json_key: str): # Added json_key
     """Starts a backend service using uvicorn."""
     log_file = os.path.join(ROOT_DIR, f"{service_name}_server.log")
     service_dir = os.path.join(ROOT_DIR, service_name)
@@ -174,10 +174,38 @@
         print(f"{YELLOW}⚠️ Log configuration file not found: {LOG_CONFIG_FILE}{NC}")
         print(f"{YELLOW}   Starting {service_name} on port {port} without specific log configuration.{NC}")
 
+    # --- Start Modification ---
     env = os.environ.copy()
     python_path = env.get('PYTHONPATH', '')
     env['PYTHONPATH'] = f"{ROOT_DIR}{os.pathsep}{python_path}"
     env['PORT'] = str(port) # Set PORT env var for the service
+    env['APP_ENV'] = APP_ENV # Pass current environment
+
+    # Extract and set data paths from the global environment_config
+    service_env_config = environment_config.get(json_key, {}) # Use json_key ('main_backend', 'prefs_service')
+    data_paths = service_env_config.get('data_paths', {})
+    print(f"  Data paths config for {service_name} ({json_key}): {data_paths}")
+
+    if service_name == "backend": # service_name is the directory name
+        repo_root = data_paths.get('repositories_root')
+        job_path = data_paths.get('jobs_path')
+        if repo_root:
+            env['C4H_BACKEND_REPO_ROOT'] = repo_root
+            print(f"  Setting C4H_BACKEND_REPO_ROOT={repo_root}")
+        else:
+            print(f"  {YELLOW}C4H_BACKEND_REPO_ROOT not set (using default in service){NC}")
+        if job_path:
+            env['C4H_BACKEND_JOB_PATH'] = job_path
+            print(f"  Setting C4H_BACKEND_JOB_PATH={job_path}")
+        else:
+            print(f"  {YELLOW}C4H_BACKEND_JOB_PATH not set (using default in service){NC}")
+
+    elif service_name == "shell_service": # service_name is the directory name
+        db_url = data_paths.get('database_url')
+        if db_url:
+            env['DATABASE_URL'] = db_url # This matches the existing env var used by shell_service
+            print(f"  Setting DATABASE_URL={db_url}")
+        else:
+            print(f"  {YELLOW}DATABASE_URL for shell_service not set (using default in service){NC}")
+    # --- End Modification ---
 
     cmd = [
         sys.executable, "-m", "uvicorn",
@@ -194,7 +222,7 @@
             stdout=open(log_file, 'w'),
             stderr=subprocess.STDOUT,
             cwd=ROOT_DIR,
-            env=env,
+            env=env, # Use the modified environment
             # Make the child process a group leader on Unix-like systems
             preexec_fn=os.setsid if sys.platform != "win32" else None
         )
@@ -299,9 +327,10 @@
     print_header("STARTING SERVICES")
     start_failed = False
     # Iterate using tuple unpacking from services_to_start_info
-    for service_name, _, uvicorn_target, _ in services_to_start_info:
+    # Make sure services_to_start_info contains the json_key (4th element)
+    for service_name, _, uvicorn_target, json_key in services_to_start_info: # Added json_key
          port = final_ports[service_name] # Get the final port determined earlier
-         if not start_service(service_name, port, uvicorn_target):
+         # Pass json_key to start_service
+         if not start_service(service_name, port, uvicorn_target, json_key):
              start_failed = True
              print(f"{RED}❌ Failed to start {service_name}. Stopping already started services...{NC}")
              cleanup()
===CHANGE_END===
