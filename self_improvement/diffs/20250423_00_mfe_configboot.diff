===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/index.tsx
TYPE: modify
DESCRIPTION: Add shell service URL global variable for MFE bootstrapping
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/index.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/index.tsx
@@ -9,7 +9,10 @@
 import App from './App';
 import { eventBus } from 'shared';
  
-// Make event bus globally available for all microfrontends
+// Make critical services globally available for all microfrontends
+// Set shell service URL global for MFE bootstrap process
+(window as any).__C4H_SHELL_SERVICE_URL__ = import.meta.env.VITE_PREFS_SERVICE_URL || 'http://localhost:8011';
+
 // This allows iframe MFEs or others to access it via window
 (window as any).__C4H_EVENT_BUS__ = eventBus;
  
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/utils/bootstrapHelper.ts
TYPE: create
DESCRIPTION: Create bootstrap helper utility (without isBootstrapped check)
DIFF:
--- /dev/null
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/utils/bootstrapHelper.ts
@@ -0,0 +1,51 @@
+/**
+ * /packages/shared/src/utils/bootstrapHelper.ts
+ * Utility for MFE self-initialization and configuration
+ */
+import axios from 'axios';
+import { configureApiService, checkApiServiceReady } from '../services/apiService';
+// Note: EventBus and EventTypes are not strictly needed here anymore unless
+// the bootstrap itself needs to publish events. Removed for simplicity.
+// import { eventBus, EventTypes } from './eventBus';
+
+/**
+ * MFE bootstrap status
+ */
+export interface BootstrapResult {
+  success: boolean;
+  config?: any; // Consider using a more specific ShellConfigurationResponse type if needed later
+  error?: any;
+}
+
+/**
+ * Get shell service URL from globals
+ */
+export function getShellServiceUrl(): string | undefined {
+  // Type assertion for window global property
+  return (window as any).__C4H_SHELL_SERVICE_URL__;
+}
+
+/**
+ * Bootstrap MFE by loading configuration from the shell service
+ * and configuring required services. This should be called by each MFE on mount.
+ *
+ * @param mfeId Identifier for the MFE (for logging)
+ * @returns Promise with bootstrap result
+ */
+export async function bootstrapConfig(mfeId: string): Promise<BootstrapResult> {
+  console.log(`[${mfeId}] Attempting bootstrap...`);
+
+  const shellServiceUrl = getShellServiceUrl();
+  if (!shellServiceUrl) {
+    console.error(`[${mfeId}] Bootstrap failed: Shell service URL not found on window!`);
+    return { success: false, error: "Shell service URL not found" };
+  }
+
+  try {
+    console.log(`[${mfeId}] Bootstrapping: Fetching config from ${shellServiceUrl}...`);
+    // Use axios directly as apiService might not be configured yet for this MFE instance
+    const response = await axios.get(`${shellServiceUrl}/api/v1/shell/configuration`);
+    const config = response.data;
+
+    if (config?.serviceEndpoints?.jobConfigServiceUrl) {
+      // This configures the apiService instance specific to the calling MFE's context/bundle
+      configureApiService(config.serviceEndpoints.jobConfigServiceUrl);
+      console.log(`[${mfeId}] Bootstrap successful: apiService configured with endpoint: ${config.serviceEndpoints.jobConfigServiceUrl}`);
+      return { success: true, config };
+    } else {
+      console.error(`[${mfeId}] Bootstrap failed: Config response missing required serviceEndpoints.jobConfigServiceUrl`);
+      throw new Error("Configuration response missing required service endpoint URL");
+    }
+  } catch (error: any) {
+    console.error(`[${mfeId}] Bootstrap failed:`, error.response?.data || error.message || error);
+    return { success: false, error: error.response?.data || error.message || error };
+  }
+}

===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/index.ts
TYPE: modify
DESCRIPTION: Export bootstrap helper from shared package
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/index.ts
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/index.ts
@@ -12,6 +12,7 @@
 export * from './types/iframe';        
 export * from './types/events';        
 
+export * from './utils/bootstrapHelper';
 // Use regular 'export' for modules that export runtime values (or mixed)
 export * from './config/configTypes';
 
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/services/apiService.ts
TYPE: modify
DESCRIPTION: Enhance apiService with better configuration tracking and error handling
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/services/apiService.ts
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shared/src/services/apiService.ts
@@ -30,15 +30,10 @@
   const finalBaseUrl = baseUrl || API_BASE_URL;
   console.log(`apiService: configureApiService CALLED with: ${baseUrl}. Setting base URL to: ${finalBaseUrl}`);
 
-  if (axiosInstance.defaults.baseURL !== finalBaseUrl) {
-    console.log(`apiService: Configuring baseURL to: ${finalBaseUrl}`);
-    axiosInstance.defaults.baseURL = finalBaseUrl;
-    isApiConfigured = true; // Mark as configured
-  } else {
-    console.log(`apiService: baseURL already set to: ${finalBaseUrl}`);
-    // If it's already set to the final URL (even if it's the default), consider it configured.
-    isApiConfigured = true;
-  }
+  // Always set regardless of previous value to ensure consistency across MFEs
+  axiosInstance.defaults.baseURL = finalBaseUrl;
+  isApiConfigured = true; // Mark as configured
+  console.log(`apiService: Successfully configured with baseURL: ${finalBaseUrl}`);
 };
 
 // --- NEW: Function to check readiness ---
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/main.tsx
TYPE: modify
DESCRIPTION: Add bootstrap implementation to config-selector MFE
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/main.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/main.tsx
@@ -4,7 +4,7 @@
 import React from 'react';
 import { createRoot } from 'react-dom/client';
 import { ThemeProvider, createTheme, StyledEngineProvider } from '@mui/material/styles';
-import CssBaseline from '@mui/material/CssBaseline'; 
+import CssBaseline from '@mui/material/CssBaseline';
 import ConfigManager from './ConfigManager';
 import { ConfigProvider } from './contexts/ConfigContext';
-import { configTypes, eventBus, EventTypes } from 'shared';
+import { configTypes, eventBus, EventTypes, bootstrapConfig } from 'shared';
 
 /**
  * Map between shell app IDs and normalized config types
@@ -16,6 +16,25 @@
   'config-selector-runtime': 'runtimeconfig'
 };
 
+/**
+ * Bootstrap function for config-selector MFE
+ * Called by shell when mounting to ensure proper configuration
+ */
+export async function bootstrapMfe(mfeId: string) {
+  console.log(`ConfigSelector: Bootstrap called for ${mfeId}`);
+  
+  try {
+    const result = await bootstrapConfig(mfeId);
+    if (!result.success) {
+      console.error(`ConfigSelector: Bootstrap failed: ${result.error}`);
+      return { success: false, error: result.error };
+    }
+    return { success: true, config: result.config };
+  } catch (error) {
+    console.error(`ConfigSelector: Bootstrap error:`, error);
+    return { success: false, error };
+  }
+}
+
 /**
  * Mount function for ConfigSelector with proper config type detection
  * and shell readiness check
@@ -23,6 +42,10 @@
 export function mount(props: any) {
   const { domElement, appId = '', customProps = {} } = props; // Use appId from props
  
+  // Call bootstrap when mounted
+  bootstrapMfe(appId)
+    .catch(err => console.error(`ConfigSelector: Bootstrap error during mount:`, err));
+  
   // Determine config type from app ID or props
   let configType = customProps.configType || 'workorder'; // Default
   
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/job-management/src/main.tsx
TYPE: modify
DESCRIPTION: Add bootstrap implementation to job-management MFE
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/job-management/src/main.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/job-management/src/main.tsx
@@ -7,6 +7,7 @@
 import { ThemeProvider, createTheme, StyledEngineProvider } from '@mui/material/styles';
 import CssBaseline from '@mui/material/CssBaseline';
 import JobManager from './JobManager';
+import { bootstrapConfig } from 'shared';
 import { JobProvider } from './contexts/JobContext';
 
 // Define props interface for mount function
@@ -27,6 +28,25 @@
   },
 });
 
+/**
+ * Bootstrap function for job-management MFE
+ * Called by shell when mounting to ensure proper configuration
+ */
+export async function bootstrapMfe(mfeId: string) {
+  console.log(`JobManagement: Bootstrap called for ${mfeId}`);
+  
+  try {
+    const result = await bootstrapConfig(mfeId);
+    if (!result.success) {
+      console.error(`JobManagement: Bootstrap failed: ${result.error}`);
+      return { success: false, error: result.error };
+    }
+    return { success: true, config: result.config };
+  } catch (error) {
+    console.error(`JobManagement: Bootstrap error:`, error);
+    return { success: false, error };
+  }
+}
+
 // Export the component directly
 export default JobManager;
 
@@ -35,6 +55,10 @@
  */
 export function mount(props: MountProps) {
   const { domElement, customProps = {} } = props;
+
+  // Call bootstrap when mounted
+  bootstrapMfe(customProps.appId || 'job-management')
+    .catch(err => console.error(`JobManagement: Bootstrap error during mount:`, err));
   
   // Create root once
   const root = createRoot(domElement);
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/test-app/src/main.tsx
TYPE: modify
DESCRIPTION: Add bootstrap implementation to test-app MFE
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/test-app/src/main.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/test-app/src/main.tsx
@@ -5,12 +5,32 @@
 import React from 'react';
 import { createRoot } from 'react-dom/client';
 import TestApp from './TestApp';
+import { bootstrapConfig } from 'shared';
 
 /**
  * Export the default component for ESM imports
  */
 export default TestApp;
 
+/**
+ * Bootstrap function for test-app MFE
+ * Called by shell when mounting to ensure proper configuration
+ */
+export async function bootstrapMfe(mfeId: string) {
+  console.log(`TestApp: Bootstrap called for ${mfeId}`);
+  
+  try {
+    const result = await bootstrapConfig(mfeId);
+    if (!result.success) {
+      console.error(`TestApp: Bootstrap failed: ${result.error}`);
+      return { success: false, error: result.error };
+    }
+    return { success: true, config: result.config };
+  } catch (error) {
+    console.error(`TestApp: Bootstrap error:`, error);
+    return { success: false, error };
+  }
+}
+
 /**
  * Optional mount function for compatibility with different consumption patterns
  * @param props - Properties including DOM element to mount into
@@ -18,6 +38,10 @@
  */
 export function mount(props: any) {
   const { domElement, ...restProps } = props;
+
+  // Call bootstrap when mounted
+  bootstrapMfe(restProps.appId || 'test-app')
+    .catch(err => console.error(`TestApp: Bootstrap error during mount:`, err));
   
   // Create a root using React 18's createRoot API
   const root = createRoot(domElement);
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/yaml-editor/src/main.tsx
TYPE: modify
DESCRIPTION: Add bootstrap implementation to yaml-editor MFE
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/yaml-editor/src/main.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/yaml-editor/src/main.tsx
@@ -6,11 +6,31 @@
 import { ThemeProvider, createTheme, StyledEngineProvider } from '@mui/material/styles';
 import CssBaseline from '@mui/material/CssBaseline';
 import YamlEditor from './YamlEditor';
+import { bootstrapConfig } from 'shared';
 
 // Export the component
 export default YamlEditor;
 
 /**
+ * Bootstrap function for yaml-editor MFE
+ * Called by shell when mounting to ensure proper configuration
+ */
+export async function bootstrapMfe(mfeId: string) {
+  console.log(`YamlEditor: Bootstrap called for ${mfeId}`);
+  
+  try {
+    const result = await bootstrapConfig(mfeId);
+    if (!result.success) {
+      console.error(`YamlEditor: Bootstrap failed: ${result.error}`);
+      return { success: false, error: result.error };
+    }
+    return { success: true, config: result.config };
+  } catch (error) {
+    console.error(`YamlEditor: Bootstrap error:`, error);
+    return { success: false, error };
+  }
+}
+
+/**
  * Mount function for dynamic loading
  * Includes all required providers following MFE Guidelines
  */
@@ -18,6 +38,10 @@
   const { domElement, customProps = {} } = props;
   
   console.log('YamlEditor: Mounting with props:', customProps);
+
+  // Call bootstrap when mounted
+  bootstrapMfe(customProps.appId || 'yaml-editor')
+    .catch(err => console.error(`YamlEditor: Bootstrap error during mount:`, err));
   
   const root = createRoot(domElement);
   
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/App.tsx
TYPE: modify
DESCRIPTION: Update MFE mounting to call bootstrapConfig
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/App.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/shell/src/App.tsx
@@ -342,6 +342,17 @@
             console.log(`App.tsx: Mount Effect - ESM Module loaded for ${appDef.id}`, module);
 
             try {
+                // Call bootstrap function if MFE supports it
+                if (module.bootstrapMfe && typeof module.bootstrapMfe === 'function') {
+                    console.log(`Shell: Calling bootstrapMfe for ${appDef.id}`);
+                    try {
+                        await module.bootstrapMfe(appDef.id);
+                    } catch (bootstrapError) {
+                        console.error(`Shell: Error bootstrapping MFE ${appDef.id}:`, bootstrapError);
+                    }
+                }
+                
                 let unmountFn: (() => void) | undefined = undefined;
                 if (module.mount && typeof module.mount === 'function') {
                     console.log(`App.tsx: Mount Effect - Mounting ${appDef.id} via module.mount()...`);
===CHANGE_END===

===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/contexts/ConfigContext.tsx
TYPE: modify
DESCRIPTION: REMOVE API readiness checks/retries, trusting bootstrap process
DIFF:
--- a/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/contexts/ConfigContext.tsx
+++ b/Users/jim/src/apps/c4h_editor_aidev/c4h-micro/packages/config-selector/src/contexts/ConfigContext.tsx
@@ -102,29 +102,8 @@
   const loadConfigs = useCallback(async () => {
     setLoading(true);
     setError(null);
-    // --- UPDATED CHECK ---
-    if (!checkApiServiceReady()) { // Check readiness directly from apiService
-        console.log("ConfigContext: Waiting for API service to be ready before loading configs...");
-        // Optionally set a specific loading message or just return
-        // setError("Waiting for shell configuration..."); // Or handle differently
-        setLoading(false); // Ensure loading is stopped if we return early
-        return; // Don't proceed if shell isn't ready
-    }
-    // --- END CHECK ---
-    console.log(`ConfigContext: Shell is ready. Proceeding to load configs for ${configType}.`);
+    console.log(`ConfigContext: Proceeding to load configs for ${configType} (assuming bootstrap complete).`);
     try {
-      // Try to ensure API is ready with retry logic
-      if (!checkApiServiceReady()) {
-        console.log("ConfigContext: API service not ready, will retry...");
-        setError("API service not configured yet. Retrying...");
-        
-        // Retry a few times
-        let retries = 5;
-        while (retries > 0 && !checkApiServiceReady()) {
-          await new Promise(resolve => setTimeout(resolve, 500));
-          retries--;
-        }
-        
-        if (!checkApiServiceReady()) {
-          throw new Error("API service not configured after retries. Try refreshing the page.");
-        }
-        
-        // Clear error if we eventually succeed
-        setError(null);
-      }
-      
-      console.log(`ConfigContext: API service is ready. Proceeding to load configs for ${configType}.`);
-      
       const response = await apiService.getConfigs(configType);
       setConfigs(response || []);
       // Optionally emit an event that the list was updated
@@ -251,24 +230,8 @@
     if (!currentConfig) {
       setError('No configuration selected to save'); setLoading(false); return null;
     }
-    
     const isNew = !currentConfig.id || currentConfig.id === 'new' || currentConfig.id === '';
 
-    // Try to ensure API is ready with retry logic
-    if (!checkApiServiceReady()) {
-        console.log("ConfigContext: API service not ready before save, will retry...");
-        
-        // Retry a few times before giving up
-        let retries = 5;
-        while (retries > 0 && !checkApiServiceReady()) {
-          await new Promise(resolve => setTimeout(resolve, 500));
-          retries--;
-        }
-    }
-    
-    if (!checkApiServiceReady()) {
-        console.error("ConfigContext: Cannot save config, API service is not ready after retries.");
-        setError("Cannot save: Shell configuration not ready. Please wait or refresh.");
-        setLoading(false);
-        return null;
-    }
     // --- END CHECK ---
     const effectiveId = isNew ? idFromEditor?.trim() : currentConfig.id;
===CHANGE_END===