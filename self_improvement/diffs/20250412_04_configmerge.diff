===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/agents/base_agent.py
TYPE: modify
DESCRIPTION: Refactor logging in BaseAgent.__init__ to use bound logger for config dump.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/agents/base_agent.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/agents/base_agent.py
@@ -80,13 +80,13 @@
                      })
             
         # Update to pass configuration to logger
-        self.logger = get_logger(self.config).bind(**log_context)
+        # Bind context directly to the logger obtained using the config
+        self.logger = get_logger(self.config).bind(**log_context) #
         
         # --- ADDED: Log the full configuration received by the agent ---
         try:
             # Use default=str for safe serialization of non-standard types like datetime
-            config_dump = json.dumps(self.config, indent=2, default=str)
-            logger.debug(f"{agent_name}.__init__.received_config", config_json=config_dump)
+            self.logger.debug(f"{agent_name}.__init__.received_config", config_data=self.config) # Use self.logger and pass dict directly
         except Exception as e:
-            logger.error(f"{agent_name}.__init__.config_dump_failed", error=str(e))
+            self.logger.error(f"{agent_name}.__init__.config_dump_failed", error=str(e)) # Use self.logger
         # --- END ADDED ---
         
         # --- Previous code continues...
@@ -98,7 +98,7 @@
             run_id = self._get_workflow_run_id()
             if run_id:
                 # --- MODIFIED: Use self.logger ---
-                logger.debug(f"{agent_name}.using_workflow_run_id", 
+                self.logger.debug(f"{agent_name}.using_workflow_run_id",
                             run_id=run_id, 
                             config_keys=list(self.config.keys()), 
                             source="config")
@@ -117,12 +117,12 @@
             self.run_id = self.lineage.run_id
             
         except Exception as e:
-            logger.error(f"{agent_name}.lineage_init_failed", error=str(e))
+            self.logger.error(f"{agent_name}.lineage_init_failed", error=str(e)) # Use self.logger
             # Generate run ID if lineage fails
             self.run_id = str(uuid.uuid4())

-        logger.info(f"{agent_name}.initialized", 
-                    run_id=self.run_id,
+        self.logger.info(f"{agent_name}.initialized", # Use self.logger
+                    run_id=self.run_id, #
                     continuation_settings={
                         "max_attempts": self.max_continuation_attempts,
                         "token_buffer": self.continuation_token_buffer
@@ -166,7 +166,7 @@
     
     def _process(self, context: Dict[str, Any]) -> AgentResponse:
         try:
-            if self._should_log(LogDetail.DETAILED):
+            if self._should_log(LogDetail.DETAILED): # Use self.logger below
                 logger.info("agent.processing", context_keys=list(context.keys()) if context else None)
             
             # Prepare lineage tracking context
@@ -174,7 +174,7 @@
             agent_execution_id = lineage_context.get("agent_execution_id")
             parent_id = lineage_context.get("parent_id")
             
-            logger.debug("agent.lineage_context", 
+            self.logger.debug("agent.lineage_context", # Use self.logger
                         agent_id=self.agent_id,
                         agent_execution_id=agent_execution_id,
                         parent_id=parent_id, #
@@ -187,8 +187,8 @@
             system_message = self._get_system_message()
             user_message = self._format_request(data)
             
-            if self._should_log(LogDetail.DEBUG):
-                logger.debug("agent.messages",
+            if self._should_log(LogDetail.DEBUG): # Use self.logger below
+                self.logger.debug("agent.messages",
                             system_length=len(system_message),
                             user_length=len(user_message),
                             agent_execution_id=agent_execution_id,
@@ -215,7 +215,7 @@
                 # Process response
                 processed_data = self._process_response(content, raw_response)
                 
-                # Add execution metadata 
+                # Add execution metadata
                 processed_data["execution_metadata"] = {
                     "agent_execution_id": agent_execution_id,
                     "parent_id": parent_id,
@@ -230,7 +230,7 @@
                 # Track lineage if enabled
                 if lineage_enabled:
                     try:
-                        logger.debug("lineage.tracking_attempt", 
+                        self.logger.debug("lineage.tracking_attempt", # Use self.logger
                                     agent=self._get_agent_name(), 
                                     agent_execution_id=agent_execution_id,
                                     parent_id=parent_id, #
@@ -247,10 +247,10 @@
                                 response=raw_response,
                                 metrics=response_metrics
                             )
-                        logger.info("lineage.tracking_complete", 
+                        self.logger.info("lineage.tracking_complete", # Use self.logger
                                 agent=self._get_agent_name(),
                                 agent_execution_id=agent_execution_id)
-                    except Exception as e:
+                    except Exception as e: # Use self.logger below
                         logger.error("lineage.tracking_failed", 
                                     error=str(e), 
                                     error_type=type(e).__name__, 
@@ -258,7 +258,7 @@
                                     agent_execution_id=agent_execution_id)
                 else:
                     # --- MODIFIED: Use self.logger ---
-                    logger.debug("lineage.tracking_skipped",
+                    self.logger.debug("lineage.tracking_skipped",
                             has_lineage=hasattr(self, 'lineage'),
                             lineage_enabled=getattr(self.lineage, 'enabled', False) if hasattr(self, 'lineage') else False,
                             agent=self._get_agent_name())
@@ -286,7 +286,7 @@
                             response={"error": str(e)},
                             metrics={"error": True}
                         )
-                    except Exception as lineage_error:
+                    except Exception as lineage_error: # Use self.logger below
                         logger.error("lineage.failure_tracking_failed", 
                                     error=str(lineage_error),
                                     original_error=str(e))

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/agents/continuation/utils.py
TYPE: modify
DESCRIPTION: Refactor logging in continuation utils to use parent agent logger.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/utils.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/utils.py
@@ -1,15 +1,17 @@
 from typing import Dict, Any, List, Optional
 import logging
 import traceback
-import litellm
+import litellm #
 from litellm import completion
-from .config import ContentType
+# from .config import ContentType # Not used in this file
+# Import the central logger utility
+from c4h_agents.utils.logging import get_logger
 
 def setup_logger(parent_agent) -> logging.Logger:
     """Set up logger using parent agent's logger or fallback."""
     try:
         logger_instance = getattr(parent_agent, 'logger', None)
-        if logger_instance is None:
+        if logger_instance is None: # Fallback if parent doesn't have logger
             logger_instance = logging.getLogger(__name__)
             logging.basicConfig(level=logging.INFO)
         logger_instance.debug("Logger initialized", extra={"logger_type": type(logger_instance).__name__})
@@ -23,7 +25,7 @@
                      extra={"error": str(e), "stack_trace": traceback.format_exc()})
         return logger
 
-def make_llm_request(params: Dict[str, Any], logger, parent_agent) -> Any:
+def make_llm_request(params: Dict[str, Any], logger, parent_agent) -> Any: # logger parameter already exists
     """Make LLM request with rate limit handling."""
     try:
         litellm.retry = True
@@ -39,7 +41,7 @@
         if "api_base" in provider_config:
             safe_params["api_base"] = provider_config["api_base"]
         
-        logger.debug("Making LLM request", extra={"params": safe_params})
+        logger.debug("Making LLM request", params=safe_params) # Pass params directly to structlog
         return completion(**safe_params)
     except litellm.RateLimitError as e:
         logger.warning("Rate limit error in LLM request", extra={"error": str(e)})
@@ -49,19 +51,20 @@
                      extra={"error": str(e), "stack_trace": traceback.format_exc()})
         raise
 
-def get_content_from_response(response: Any, logger) -> str:
+def get_content_from_response(response: Any, logger) -> str: # logger parameter already exists
     """Extract content from LLM response."""
     try:
         if hasattr(response, 'choices') and response.choices:
             if hasattr(response.choices[0], 'message') and hasattr(response.choices[0].message, 'content'):
                 content = response.choices[0].message.content
                 logger.debug("Content extracted from response",
-                            extra={"content_preview": content[:100]})
+                            content_preview=content[:100]) # Pass directly
                 return content
         logger.warning("No content found in response")
         return ""
     except Exception as e:
         logger.error("Content extraction failed",
-                     extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                     error=str(e), # Pass directly
+                     stack_trace=traceback.format_exc())
         return ""
 

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/agents/continuation/continuation_handler.py
TYPE: modify
DESCRIPTION: Refactor logging in ContinuationHandler to use parent agent logger.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/continuation_handler.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/continuation_handler.py
@@ -5,6 +5,8 @@
 import traceback
 
 import litellm
+# Import the central logger utility
+from c4h_agents.utils.logging import get_logger
 from .config import WINDOW_CONFIG, STITCHING_STRATEGIES, requires_json_cleaning
 from .overlap_strategies import find_explicit_overlap
 from .joining_strategies import join_with_explicit_overlap, clean_json_content
@@ -19,11 +21,8 @@
         self.temperature = parent_agent.temperature
         self.max_continuation_attempts = parent_agent.max_continuation_attempts
         
-        # Set up logger - use parent's logger if available
-        self.logger = getattr(parent_agent, 'logger', None)
-        if not self.logger:
-            import logging
-            self.logger = logging.getLogger(__name__)
-            logging.basicConfig(level=logging.INFO)
+        # Use parent agent's logger if available, otherwise get a default one
+        # Parent logger should already be configured via get_logger(config)
+        self.logger = getattr(parent_agent, 'logger', get_logger()) #
         
         self.metrics = {
             "attempts": 0, 
@@ -41,14 +40,14 @@
         accumulated_content = ""
         final_response = None
         
-        self.logger.info("Starting continuation process",
-                        extra={"model": self.model_str})
+        self.logger.info("Starting continuation process", #
+                        model=self.model_str) # Pass directly
         
         rate_limit_retries = 0
         rate_limit_backoff = WINDOW_CONFIG["rate_limit_retry_base_delay"]
         completion_params = self._build_completion_params(messages)
         
         try:
-            # Initial request
+            # Initial request - Use internal helper that calls parent methods if needed
             response = self._make_llm_request(completion_params)
             content = self._get_content_from_response(response)
             self.logger.debug("Received initial content",
@@ -61,8 +60,8 @@
             while attempt < max_tries:
                 finish_reason = getattr(response.choices[0], 'finish_reason', None)
                 if finish_reason != 'length':
-                    self.logger.info("Continuation complete",
-                                  extra={"finish_reason": finish_reason, "attempts": attempt})
+                    self.logger.info("Continuation complete", #
+                                  finish_reason=finish_reason, attempts=attempt) # Pass directly
                     break
                 
                 attempt += 1
@@ -85,8 +84,8 @@
                 cont_messages.append({"role": "assistant", "content": accumulated_content})
                 cont_messages.append({"role": "user", "content": continuation_prompt})
                 
-                self.logger.info("Requesting continuation",
-                               extra={"attempt": attempt, "window_size": window_size, 
+                self.logger.info("Requesting continuation", #
+                               attempt=attempt, window_size=window_size, # Pass directly
                                     "overlap_size": len(explicit_overlap)})
                 
                 # Handle stitching attempts
@@ -97,8 +96,8 @@
                     try:
                         # Make continuation request
                         cont_params = completion_params.copy()
-                        cont_params["messages"] = cont_messages
-                        response = self._make_llm_request(cont_params)
+                        cont_params["messages"] = cont_messages # Use updated messages
+                        response = self._make_llm_request(cont_params) # Make the LLM call
                         cont_content = self._get_content_from_response(response)
                         
                         # Try to join with explicit overlap
@@ -115,7 +114,7 @@
                             final_response = response
                             stitching_success = True
                             self.logger.debug("Successfully joined content with explicit overlap",
-                                           extra={"content_length": len(accumulated_content)})
+                                           content_length=len(accumulated_content)) # Pass directly
                         else:
                             # Couldn't find explicit overlap, try fallback strategies
                             stitching_attempts += 1
@@ -124,7 +123,7 @@
                             if stitching_attempts <= len(STITCHING_STRATEGIES):
                                 strategy = STITCHING_STRATEGIES[stitching_attempts - 1]
                                 self.logger.warning(f"Stitching failed, trying {strategy['name']}",
-                                                 extra={"attempt": attempt, "stitching_attempt": stitching_attempts})
+                                                 attempt=attempt, stitching_attempt=stitching_attempts) # Pass directly
                                 
                                 # Use progressively stronger overlap requests in fallback strategies
                                 adjusted_overlap_size = overlap_size * (1 + stitching_attempts // 2)
@@ -140,14 +139,14 @@
                         self.metrics["rate_limit_retries"] += 1
                         if rate_limit_retries > WINDOW_CONFIG["rate_limit_max_retries"]:
                             self.logger.error("Max rate limit retries exceeded",
-                                extra={"retry_count": rate_limit_retries, "error": str(e)})
+                                retry_count=rate_limit_retries, error=str(e)) # Pass directly
                             raise
                         
                         # Calculate backoff with jitter
                         jitter = 0.1 * rate_limit_backoff * (0.5 - random.random())
                         current_backoff = min(rate_limit_backoff + jitter, WINDOW_CONFIG["rate_limit_max_backoff"])
                         self.logger.warning("Rate limit encountered, backing off",
-                                extra={"attempt": attempt, "retry_count": rate_limit_retries,
+                                attempt=attempt, retry_count=rate_limit_retries, # Pass directly
                                                 "backoff_seconds": current_backoff, "error": str(e)})
                         time.sleep(current_backoff)
                         rate_limit_backoff = min(rate_limit_backoff * 2, WINDOW_CONFIG["rate_limit_max_backoff"])
@@ -156,8 +155,8 @@
                     
                     except Exception as e:
                         # General error handling
-                        self.logger.error("Continuation attempt failed",
-                                       extra={"attempt": attempt, "error": str(e),
+                        self.logger.error("Continuation attempt failed", #
+                                       attempt=attempt, error=str(e), # Pass directly
                                            "stack_trace": traceback.format_exc()})
                         stitching_attempts += 1
                         self.metrics["stitching_retries"] += 1
@@ -168,7 +167,7 @@
                     append_marker = f"\n\n--- CONTINUATION STITCHING FAILED AFTER {stitching_attempts} RETRIES ---\n\n"
                     accumulated_content += append_marker + cont_content
                     self.metrics["fallback_matches"] += 1
-                    self.logger.error("All stitching retries failed, appending with marker",
-                                  extra={"attempt": attempt})
+                    self.logger.error("All stitching retries failed, appending with marker", #
+                                  attempt=attempt) # Pass directly
                     break
             
             # Clean up content if needed
@@ -180,13 +179,13 @@
                 final_response.choices[0].message.content = accumulated_content
             
             self.logger.info("Continuation process completed",
-                           extra={"attempts": attempt, "metrics": self.metrics, 
+                           attempts=attempt, metrics=self.metrics, # Pass directly
                                 "content_length": len(accumulated_content)})
                 
             return accumulated_content, final_response
             
         except Exception as e:
-            self.logger.error("Continuation process failed",
-                           extra={"error": str(e), "stack_trace": traceback.format_exc(),
+            self.logger.error("Continuation process failed", #
+                           error=str(e), stack_trace=traceback.format_exc(), # Pass directly
                                   "content_so_far": accumulated_content[:200]})
             raise

@@ -213,7 +212,7 @@
         except Exception as e:
             self.logger.error("Prompt creation failed",
                       extra={"error": str(e), "stack_trace": traceback.format_exc()})
-            return f"Continue precisely from: {explicit_overlap}"
+            return f"Continue precisely from: {explicit_overlap}" # Fallback prompt
 
     def _build_completion_params(self, messages: List[Dict[str, str]]) -> Dict[str, Any]:
         """Build parameters for LLM completion request."""
@@ -225,11 +224,11 @@
             params.update(provider_config.get("model_params", {}))
             if "api_base" in provider_config:
                 params["api_base"] = provider_config["api_base"]
-            self.logger.debug("Completion parameters built", extra={"params": params})
+            self.logger.debug("Completion parameters built", params=params) # Pass directly
             return params
         except Exception as e:
             self.logger.error("Completion params build failed",
-                            extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                            error=str(e), stack_trace=traceback.format_exc()) # Pass directly
             raise
             
     def _make_llm_request(self, params: Dict[str, Any]) -> Any:
@@ -242,11 +241,11 @@
             safe_params = {k: v for k, v in params.items()
                         if k in ['model', 'messages', 'temperature', 'max_tokens', 'top_p', 'stream']}
             
-            self.logger.debug("Making LLM request")
+            self.logger.debug("Making LLM request") # Log message remains simple
             return litellm.completion(**safe_params)
         except Exception as e:
             self.logger.error("LLM request failed",
-                            extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                            error=str(e), stack_trace=traceback.format_exc()) # Pass directly
             raise
             
     def _get_content_from_response(self, response: Any) -> str:
@@ -260,7 +259,7 @@
             return ""
         except Exception as e:
             self.logger.error("Content extraction failed",
-                            extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                            error=str(e), stack_trace=traceback.format_exc()) # Pass directly
             return ""

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/agents/continuation/joining_strategies.py
TYPE: modify
DESCRIPTION: Refactor logging in joining strategies to use bound logger.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/joining_strategies.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/joining_strategies.py
@@ -3,6 +3,8 @@
 import re
 import traceback
 import json
+# Import the central logger utility
+from c4h_agents.utils.logging import get_logger
 from .overlap_strategies import find_explicit_overlap
 
 def join_with_explicit_overlap(previous: str, current: str, explicit_overlap: str, requested_size: int, logger) -> Tuple[str, bool]:
@@ -25,14 +27,14 @@
             # Join the content at the identified position
             joined_content = previous + current[position:]
             logger.debug("Successfully joined with explicit overlap", 
-                        extra={"overlap_size": position, "joined_length": len(joined_content)})
+                        overlap_size=position, joined_length=len(joined_content)) # Pass directly
             return joined_content, True
             
         # If explicit overlap matching failed, try some simple structural heuristics
         # This can handle case where the LLM didn't repeat properly but continued sensibly
         
         if _is_valid_append_point(previous, current):
-            logger.info("Used structural heuristics for joining", 
+            logger.info("Used structural heuristics for joining", #
                       extra={"method": "valid_append_point"})
             return previous + current, True
             
@@ -43,11 +45,12 @@
         
     except Exception as e:
         logger.error("Join with explicit overlap failed",
-                    extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                    error=str(e), # Pass directly
+                    stack_trace=traceback.format_exc())
         return previous, False
 
 def _is_valid_append_point(previous: str, current: str) -> bool:
-    """Check if it's reasonable to directly append content."""
+    """Check if it's reasonable to directly append content.""" #
     # Basic structural checks... (existing logic)
     return False # Placeholder for brevity, actual logic remains
         
@@ -61,14 +64,14 @@
             if open_braces > close_braces:
                 missing = open_braces - close_braces
                 content += '\n' + '}' * missing
-                logger.debug("Added missing closing braces", extra={"count": missing})
+                logger.debug("Added missing closing braces", count=missing) # Pass directly
             
             # Fix unbalanced brackets
             open_brackets = content.count('[')
             close_brackets = content.count(']')
             if open_brackets > close_brackets:
                 missing = open_brackets - close_brackets
-                content += '\n' + ']' * missing
-                logger.debug("Added missing closing brackets", extra={"count": missing})
+                content += '\n' + ']' * missing #
+                logger.debug("Added missing closing brackets", count=missing) # Pass directly
                 
             # Check for special markers
             change_begins = content.count('===CHANGE_BEGIN===')
@@ -77,7 +80,7 @@
             if change_begins > change_ends:
                 missing = change_begins - change_ends
                 content += '\n===CHANGE_END===' * missing
-                logger.debug("Added missing CHANGE_END markers", extra={"count": missing})
+                logger.debug("Added missing CHANGE_END markers", count=missing) # Pass directly
         
         # Attempt light validation - try to parse and fix
         try:
@@ -94,6 +97,6 @@
         return content
     except Exception as e:
         logger.error("Content cleaning failed",
-                      extra={"error": str(e), "stack_trace": traceback.format_exc()})
+                      error=str(e), # Pass directly
+                      stack_trace=traceback.format_exc())
         return content

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/agents/continuation/overlap_strategies.py
TYPE: modify
DESCRIPTION: Refactor logging in overlap strategies to use bound logger.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/overlap_strategies.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/agents/continuation/overlap_strategies.py
@@ -2,6 +2,8 @@
 from typing import Optional, Tuple
 import traceback
 import re
+# Import the central logger utility
+from c4h_agents.utils.logging import get_logger
 
 def find_explicit_overlap(previous: str, current: str, explicit_overlap: str, requested_size: int, logger) -> Tuple[bool, int]:
     """
@@ -18,11 +20,11 @@
         and position is the index where the continuation should start
     """
     try:
-        logger.debug("Searching for explicit overlap", 
-                    extra={
-                        "explicit_overlap_len": len(explicit_overlap),
-                        "requested_size": requested_size,
-                        "current_content_len": len(current)
+        logger.debug("Searching for explicit overlap", #
+                    explicit_overlap_len=len(explicit_overlap), # Pass directly
+                    requested_size=requested_size,
+                    current_content_len=len(current)
+                    )
                     })
         
         # Quick sanity check
@@ -42,7 +44,7 @@
         if explicit_overlap in search_area:
             position = search_area.find(explicit_overlap) + len(explicit_overlap)
             logger.debug("Found complete overlap in search area", 
-                         extra={"position": position})
+                         position=position) # Pass directly
             return True, position
             
         # Method 3: Try matching the last N characters of explicit_overlap with beginning of current
@@ -54,7 +56,7 @@
             match_text = explicit_overlap[-match_size:]
             if current.startswith(match_text):
                 logger.debug("Found partial overlap at beginning", 
-                             extra={"match_size": match_size})
+                             match_size=match_size) # Pass directly
                 return True, match_size
         
         # Method 4: Look for reasonable matches with some flexibility
@@ -73,19 +75,19 @@
             # Try to estimate how many characters this represents in the original
             approx_pos = min(len(explicit_overlap) + 20, len(current))
             logger.debug("Found normalized match", 
-                         extra={"approximated_position": approx_pos})
+                         approximated_position=approx_pos) # Pass directly
             return True, approx_pos
             
         # Last resort: Use the requested size as a hint if we can't find a match
         # This assumes the LLM tried to follow instructions but didn't repeat exactly
         if requested_size > 0 and len(current) > requested_size:
             logger.warning("Using requested size as fallback", 
-                         extra={"requested_size": requested_size})
+                         requested_size=requested_size) # Pass directly
             return True, requested_size
             
         # If we got here, we couldn't find any reasonable overlap
         logger.warning("Could not find explicit overlap", #
-                    extra={
+                    # Pass directly
                         "overlap_preview": explicit_overlap[:50] + "..." if len(explicit_overlap) > 50 else explicit_overlap,
                         "current_preview": current[:50] + "..." if len(current) > 50 else current
-                    })
+                    )
         return False, 0
         
     except Exception as e:

===CHANGE_END===
===CHANGE_BEGIN===
FILE: /Users/jim/src/apps/c4h/c4h_agents/skills/shared/markdown_utils.py
TYPE: modify
DESCRIPTION: Refactor logging in markdown utils to use centralized utility.
DIFF:
--- a/Users/jim/src/apps/c4h/c4h_agents/skills/shared/markdown_utils.py
+++ b/Users/jim/src/apps/c4h/c4h_agents/skills/shared/markdown_utils.py
@@ -4,10 +4,10 @@
 """
 
 from typing import Dict, Any, Optional
-import structlog
 from dataclasses import dataclass
+# Import the central logger utility
+from c4h_agents.utils.logging import get_logger
 
-logger = structlog.get_logger(__name__)
+logger = get_logger() # Use centralized logger
 
 @dataclass
 class CodeBlock:
@@ -48,10 +48,10 @@
         content = content.strip('`')
         
         logger.debug("markdown.extracted_code",
-                    original_length=len(raw),
-                    cleaned_length=len(content),
+                    original_length=len(raw), # Pass parameters directly
+                    cleaned_length=len(content), #
                     language=language,
                     content_preview=content[:100] if content else None)
                     
         return CodeBlock(
@@ -61,7 +61,7 @@
         )
         
     except Exception as e:
-        logger.error("markdown.extraction_failed", error=str(e))
+        logger.error("markdown.extraction_failed", error=str(e)) # Pass error directly
         return CodeBlock(content=content, raw=content)
 
 def is_code_block(content: str) -> bool:

===CHANGE_END===