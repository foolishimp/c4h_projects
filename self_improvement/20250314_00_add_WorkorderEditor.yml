# C4H Editor - WorkOrder Editor & Management Enhancements (Phase 1)

# Project settings
project:
  path: "/Users/jim/src/apps/c4h_editor"
  workspace_root: "workspaces"

# Intent description
intent:
  description: |
        # C4H Editor - WorkOrder Editor & Management Enhancements (Phase 1)

        ## Goal
        Enhance the C4H Editor with a comprehensive WorkOrder Editor and Management system that aligns with the configuration hierarchy principles and provides users with robust tools for creating, editing, and managing work orders.

        ## Context
        The current C4H Editor implementation has basic WorkOrder management but lacks the specialized editors and UI components needed to fully support the hierarchical configuration design principles. This work order focuses on implementing the tabbed editor interface and improving WorkOrder management capabilities.

        ## Required Changes (Prioritized)

        ### 1. WorkOrder Editor Enhancements
        
        1.1. Create a tabbed interface in the WorkOrder Editor with tabs for each major configuration section:
        - Intent Configuration
        - Project Configuration
        - LLM Configuration
        - Orchestration Configuration
        - Runtime Configuration
        
        1.2. Implement specialized editors for different configuration types:
        - Text editor for free-form text sections
        - Structured form for metadata
        - Parameter editor for workorder parameters
        - Configuration editor for hierarchical settings
        
        1.3. Add validation compatible with hierarchical config design principles:
        - Validate required fields without excessive validation
        - Maintain hierarchy structure during edits
        - Support merging behavior where overrides update leaf values
        
        1.4. Add YAML preview/edit mode:
        - Provide a YAML view of the complete workorder
        - Allow direct YAML editing with syntax highlighting
        - Implement two-way sync between UI editors and YAML view

        ### 2. WorkOrder Management Improvements
        
        2.1. Complete the archive functionality:
        - Add archive/unarchive buttons to WorkOrder list
        - Implement archive status field in the WorkOrder model
        - Create filtered views for active vs archived workorders
        
        2.2. Enhance clone functionality:
        - Implement "Clone" action in the WorkOrder list
        - Automatically generate unique IDs for cloned workorders
        - Copy all configuration with optional prompt for new description
        
        2.3. Add filtering, sorting, and pagination to WorkOrder listing:
        - Filter by status, author, tags, and other metadata
        - Sort by creation date, update date, or alphabetically
        - Implement pagination for large numbers of workorders
        
        2.4. Implement version comparison and rollback UI:
        - Show version history with timestamps and authors
        - Provide diff view between versions
        - Allow rollback to previous versions

        ## Implementation Details

        1. Tabbed Editor Components:
          - WorkOrderEditor.tsx: The main editor with tabs for different sections
          - IntentConfigTab.tsx: For editing description, goals, etc.
          - ProjectConfigTab.tsx: For project paths and workspace settings 
          - LLMConfigTab.tsx: For LLM providers, models, and parameters
          - OrchestrationConfigTab.tsx: For teams, tasks, and routing
          - RuntimeConfigTab.tsx: For workflow and lineage settings
          - YAMLEditorTab.tsx: For raw YAML editing

        2. Backend Enhancements:
          - Add archive field to WorkOrder model
          - Create API endpoints for archive/unarchive and clone
          - Update list endpoint to support filtering, sorting, pagination

        3. UI Management Features:
          - Update WorkOrder list with filtering and sorting controls
          - Add archive and clone actions to list items
          - Enhance version history display with diff view

        ## Files to Modify

        1. Frontend:
          - frontend/src/components/WorkOrderEditor/WorkOrderEditor.tsx
          - frontend/src/components/WorkOrderEditor/WorkOrderVersionControl.tsx
          - frontend/src/hooks/useWorkOrderApi.ts

        2. Backend:
          - backend/models/workorder.py
          - backend/api/routes/workorders.py
          - backend/services/workorder_repository.py

        ## Files to Create

        1. Frontend:
          - frontend/src/components/WorkOrderEditor/IntentConfigTab.tsx
          - frontend/src/components/WorkOrderEditor/ProjectConfigTab.tsx
          - frontend/src/components/WorkOrderEditor/LLMConfigTab.tsx
          - frontend/src/components/WorkOrderEditor/OrchestrationConfigTab.tsx
          - frontend/src/components/WorkOrderEditor/RuntimeConfigTab.tsx
          - frontend/src/components/WorkOrderEditor/YAMLEditorTab.tsx
          - frontend/src/components/WorkOrderList/WorkOrderList.tsx

        ## Dependencies

        - Monaco Editor: For code and YAML editing
        - js-yaml: For YAML parsing and serialization
        - MUI components: For tabs, forms, and data grid
        - Git: For version control and diffing

# LLM configuration
llm_config:
  default_provider: "anthropic"
  default_model: "claude-3-7-sonnet-20250219"
  
  agents:
    discovery:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      tartxt_config:
        input_paths:
          - "frontend/src"
          - "backend"
        exclusions:
          - "**/node_modules/**"
          - "**/.git/**"
    
    solution_designer:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219" 
      temperature: 0.7
      extended_thinking:
        enabled: true
        budget_tokens: 32000
    
    coder:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219"
      temperature: 0
      backup_enabled: true

# Runtime configuration
runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
    error_handling:
      ignore_storage_errors: true
      log_level: "ERROR"

# Backup configuration
backup:
  enabled: true
  path: "workspaces/backups"

# Logging configuration
logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"
  truncate:
    prefix_length: 30
    suffix_length: 30