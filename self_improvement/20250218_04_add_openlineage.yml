# Path: c4h_services/examples/config/workflow_lineage_debug.yml

project:
  path: "/Users/jim/src/apps/c4h_ai_dev"  
  workspace_root: "workspaces"

intent:
  description: |
    Fix OpenLineage implementation in BaseAgent and enhance logging.
    
    Current Issues:
    1. Missing import for BaseLineage in BaseAgent
    2. Insufficient debug logging in lineage tracking code
    3. No verification that lineage events are being created
    
    Required Changes:
    
    1. Add missing import in BaseAgent:
    ```python
    from typing import Dict, Any, Optional, List, Tuple
    import structlog
    import json
    from pathlib import Path
    from datetime import datetime
    
    from c4h_agents.core.project import Project
    from c4h_agents.config import locate_keys
    from .base_config import BaseConfig, log_operation
    from .base_lineage import BaseLineage  # Add this import
    from .base_llm import BaseLLM
    ```
    
    2. Enhance lineage tracking with detailed debug logging:
    ```python
    def track_llm_interaction(self,
                             context: Dict[str, Any],
                             messages: LLMMessages,
                             response: Any,
                             metrics: Optional[Dict] = None) -> None:
        """Track complete LLM interaction"""
        try:
            event = LineageEvent(
                input_context=context,
                messages=messages,
                raw_output=response,
                metrics=metrics,
                parent_run_id=context.get('workflow_run_id')
            )
            
            # Add debug logging
            logger.debug("lineage.tracking_event",
                        agent=self.agent_name,
                        run_id=self.run_id,
                        context_keys=list(context.keys()) if context else [],
                        has_messages=messages is not None,
                        has_metrics=metrics is not None)
            
            if self.client:
                self._emit_marquez_event(event)
                logger.debug("lineage.marquez_event_emitted", run_id=self.run_id)
            else:
                self._write_file_event(event)
                logger.debug("lineage.file_event_written", 
                           run_id=self.run_id, 
                           dir=str(self.lineage_dir))
                
        except Exception as e:
            if not self.config.get('error_handling', {}).get('ignore_failures', True):
                raise
            logger.error("lineage.track_failed", error=str(e))
    ```
    
    3. Add verbose logging in _write_file_event:
    ```python
    def _write_file_event(self, event: Any) -> None:
        """Write event to file system"""
        try:
            event_dir = self.lineage_dir / self.run_id / "events"
            event_dir.mkdir(parents=True, exist_ok=True)
            
            event_file = event_dir / f"{uuid.uuid4()}.json"
            temp_file = event_file.with_suffix('.tmp')
            
            # Log before writing
            logger.debug("lineage.writing_event",
                       target_dir=str(event_dir),
                       event_file=str(event_file),
                       event_type=type(event).__name__)
            
            with open(temp_file, 'w') as f:
                if isinstance(event, LineageEvent):
                    json.dump({
                        "timestamp": event.timestamp.isoformat(),
                        "input_context": event.input_context,
                        "messages": event.messages.to_dict(),
                        "metrics": event.metrics,
                        "parent_run_id": event.parent_run_id,
                        "error": event.error
                    }, f, indent=2)
                else:
                    json.dump(event.to_dict(), f, indent=2)
                    
            temp_file.rename(event_file)
            
            # Log after successful write
            logger.info("lineage.event_written",
                       file=str(event_file),
                       agent=self.agent_name,
                       timestamp=datetime.now(timezone.utc).isoformat())
            
        except Exception as e:
            logger.error("lineage.write_failed", error=str(e), path=str(event_dir))
            raise
    ```
    
    4. Add defensive logging for lineage tracking in BaseAgent:
    ```python
    # Track lineage if enabled - with safety check and better logging
    if hasattr(self, 'lineage') and self.lineage:
        try:
            logger.debug("lineage.attempt_tracking",
                       agent=self._get_agent_name(),
                       has_context=bool(enhanced_context),
                       has_messages=bool(messages),
                       has_metrics=hasattr(raw_response, 'usage'))
                       
            self.lineage.track_llm_interaction(
                context=enhanced_context,
                messages=messages,
                response=raw_response,
                metrics={"token_usage": getattr(raw_response, 'usage', {})}
            )
            
            logger.info("lineage.tracking_complete",
                      agent=self._get_agent_name())
                      
        except Exception as e:
            logger.error("lineage.tracking_failed", 
                        error=str(e),
                        error_type=type(e).__name__,
                        agent=self._get_agent_name())
    else:
        logger.debug("lineage.tracking_skipped",
                   has_lineage=hasattr(self, 'lineage'),
                   lineage_enabled=bool(getattr(self, 'lineage', None)),
                   agent=self._get_agent_name())
    ```
    
    Implementation Requirements:
    1. Follow Agent Design Principles:
       - Add logging without affecting core functionality
       - Maintain error isolation
       - Keep changes focused on improving observability
       
    2. Only log essential information, not sensitive data:
       - Log event paths and metadata
       - Log success/failure statuses
       - Don't log full message content

llm_config:
  agents:
    discovery:
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths: 
          - "c4h_services"
          - "c4h_agents"
        exclusions: 
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"

    solution_designer:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0

    coder:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      backup_enabled: true

runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      retention:
        max_runs: 10
        max_days: 30
      subdirs:
        - "events"
        - "config"
      error_handling:
        ignore_storage_errors: true
        log_level: "ERROR"
    retry:
      enabled: true
      max_attempts: 3
      initial_delay: 1
      max_delay: 30
      backoff_factor: 2
      retry_on:
        - "overloaded_error"
        - "rate_limit_error"
        - "timeout_error"
  lineage:
    enabled: true
    backend:
      type: "file"
      path: "workspaces/lineage"
    error_handling:
      ignore_failures: true
      log_level: "ERROR"

logging:
  level: "DEBUG"  # Set to DEBUG to see the additional logging
  format: "structured"
  agent_level: "DEBUG"