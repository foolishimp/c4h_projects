# C4H Editor - Backend API Logging Implementation (Phase 1)

# Project settings
project:
  path: "/Users/jim/src/apps/c4h_editor/backend"
  workspace_root: "workspaces"

# Intent description
intent:
  description: |
        # Backend API Logging Implementation with Multi-Level Detail

        GOAL, implement comprehensive API request logging with both detailed and concise formats:

        ## Core Issues

        1. **Missing API Request Logging**:
          - There is no middleware configured to log all incoming HTTP requests
          - Current logging is inconsistent and doesn't capture all API calls
          - Cannot verify if frontend is making real API calls or using mock data

        2. **Missing Error Tracking**:
          - No global error handling middleware to catch and log all exceptions
          - Error handling is fragmented across individual handlers
          - Cannot track failed requests systematically

        ## Implementation Requirements

        1. **Implement Request Logging Middleware**:
          - Add FastAPI middleware to intercept and log ALL incoming HTTP requests
          - Generate correlation IDs to track request-response pairs
          - Capture method, URL, client IP, headers, and timestamp for every request

        2. **Create Multi-Level Log Detail**:
          - DEBUG level: Full structured JSON with complete request/response details
          - INFO level: Concise summary format for operations (e.g., "[API] GET /api/v1/configs/workorder 200 45.2ms (3f7a9b2c)")
          - WARNING level: Client errors (4xx responses)
          - ERROR level: Server errors (5xx responses) and exceptions

        3. **Implement Response Logging**:
          - Log all responses with status codes and timing information
          - Use appropriate log levels based on status code
          - Include performance metrics (request duration)

        4. **Add Global Exception Handling**:
          - Create error handling middleware to catch all unhandled exceptions
          - Log exceptions with correlation IDs and stack traces
          - Return appropriate error responses to clients

        5. **Create Structured JSON Logging**:
          - Implement a JsonFormatter for detailed logs
          - Support machine-readable logs for log aggregation tools
          - Enable filtering and searching in log analysis systems

        6. **Ensure Security Best Practices**:
          - Sanitize sensitive information (auth tokens, credentials)
          - Implement redaction for sensitive headers and data
          - Follow OWASP guidelines for secure logging

        7. **Optimize for Development and Operations**:
          - Make INFO level logs human-readable and concise
          - Ensure DEBUG level logs contain all details needed for troubleshooting
          - Add visual cues (prefixes, markers) for easy log scanning

        ## Implementation Components

        1. **Request Logging Middleware**:
           - Intercept all requests and responses
           - Generate and attach correlation IDs
           - Log at appropriate levels based on context

        2. **Error Handling Middleware**:
           - Catch and log all unhandled exceptions
           - Maintain correlation IDs across the request lifecycle
           - Return standardized error responses

        3. **Logging Configuration**:
           - Set up structured JSON logging
           - Configure log levels and formatting
           - Support both development and production environments

        4. **Application Integration**:
           - Add middlewares to FastAPI application
           - Configure proper startup and shutdown
           - Ensure logging is initialized early in the application lifecycle

        The essential implementation is to create a comprehensive logging system that
        captures all API interactions at different detail levels, enabling easy verification
        of frontend-backend communication while providing both detailed debugging information
        and concise operational summaries.

# LLM configuration
llm_config:
  default_provider: "anthropic"
  default_model: "claude-3-7-sonnet-20250219"
  
  agents:
    discovery:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      tartxt_config:
        input_paths:
          - "frontend/src"
          - "backend_api.md"
          - "/Users/jim/src/apps/c4h_projects/docs/design_docs/TypeScript_Design_Principles.md"
        exclusions:
          - "**/node_modules/**"
          - "**/.git/**"
    
    solution_designer:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219" 
      temperature: 0.7
      extended_thinking:
        enabled: true
        budget_tokens: 32000
    
    coder:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219"
      temperature: 0
      backup_enabled: true

# Runtime configuration
runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
    error_handling:
      ignore_storage_errors: true
      log_level: "ERROR"

# Backup configuration
backup:
  enabled: true
  path: "workspaces/backups"

# Logging configuration
logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"
  truncate:
    prefix_length: 30
    suffix_length: 30