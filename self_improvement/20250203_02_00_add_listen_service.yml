# Path: c4h_services/examples/config/workflow_api_service.yml

project:
  path: "/Users/jim/src/apps/c4h_ai_dev"  
  workspace_root: "workspaces"

providers:
  anthropic:
    api_base: "https://api.anthropic.com"
    default_model: "claude-3-5-sonnet-20241022"

llm_config:
  default_provider: "anthropic"
  default_model: "claude-3-5-sonnet-20241022"
  
  agents:
    discovery:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths: 
          - "c4h_services"
          - "docs"
        exclusions: 
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"

    solution_designer:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      intent:
        description: |
          Enhance prefect_runner to support an API service mode while leveraging native Prefect capabilities and existing libraries.
          
          Design:
          - Design must comply with docs/Agent_Design_Principles.md
          - Config design must comply with docs/Config_Design_Principles.md
          Implementation Requirements:

          1. Add FastAPI API mode to prefect_runner:
            - Support -S flag to run in service mode
            - Support -P flag to specify port (default 8000)
            - Maintain existing CLI functionality when not in service mode
            - Use existing config loading and project patterns

          2. Required API Endpoints:
            POST /api/v1/workflow
              Request Body:
                - system_config: Dict (YAML or JSON)
                - app_config: Dict (YAML or JSON) 
                - project_path: str
                - intent: Dict
              Response:
                - workflow_id: str
                - status: str
                - storage_path: Optional[str]

            GET /api/v1/workflow/{workflow_id}
              Response:
                - status: str
                - stages: Dict
                - events: List[Dict] (using existing event storage)
                - storage_path: Optional[str]

          3. Integration with Existing Systems:
            - Use existing config.deep_merge for config handling
            - Leverage current storage implementation
            - Use existing Project model for project handling
            - Maintain current workflow execution patterns
            - Use existing logging configuration

          4. Service Implementation Rules:
            - Keep c4h_agents completely Prefect-unaware
            - Minimize new code by leveraging existing utilities
            - Use FastAPI with default settings initially
            - Use uvicorn with standard configuration
            - Reuse existing config validation patterns
            - Leverage Prefect's native concurrency

          5. Error Handling:
            - Use existing error handling patterns
            - Standard HTTP status codes
            - Reuse current logging patterns
            - Follow existing retry policies

          Files to Create/Modify:

          1. c4h_services/src/api/service.py:
            - FastAPI app using existing patterns
            - Minimal route handlers
            - Reuse config loading
            - Use current Project model

          2. c4h_services/examples/prefect_runner.py:
            - Add service mode flags
            - Integrate FastAPI startup
            - Maintain CLI functionality
            - Reuse workflow execution

          3. c4h_services/src/api/models.py:
            - Basic Pydantic models
            - Reuse existing structures
            - Minimal validation logic
            - Map to existing types

          Constraints:
            - No changes to c4h_agents library
            - No security implementation initially
            - No new configuration patterns
            - Preserve all CLI functionality
            - Use existing patterns where possible
            - Minimize new code

          Return changes in standard JSON format with file_path, type, description, and complete content.

    coder:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      backup_enabled: true

runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      retention:
        max_runs: 10
        max_days: 30
      subdirs:
        - "events"
        - "config"
      error_handling:
        ignore_storage_errors: true
        log_level: "ERROR"
    retry:
      enabled: true
      max_attempts: 3
      initial_delay: 1
      max_delay: 30
      backoff_factor: 2
      retry_on:
        - "overloaded_error"
        - "rate_limit_error"
        - "timeout_error"

logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"