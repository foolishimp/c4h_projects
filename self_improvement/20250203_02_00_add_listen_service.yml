# Path: c4h_services/examples/config/workflow_api_service.yml

project:
  path: "/Users/jim/src/apps/c4h_ai_dev"  
  workspace_root: "workspaces"

intent:
  description: |
    Enhance prefect_runner to support an API service mode while leveraging native Prefect capabilities and existing libraries.

    Package Structure Requirements:
    1. All imports must use absolute paths from project root, following existing pattern:
        - Use: from c4h_services.src.api.service import app
        - Use: from c4h_agents.config import deep_merge
        - Never use relative imports (e.g., from ..src.api.service)
        -  CRITICAL Import Requirements: Setup import path BEFORE any c4h imports
        
        # Setup import path BEFORE any c4h imports
        root_dir = Path(__file__).parent.parent.parent
        sys.path.append(str(root_dir))

        # Only after path setup, import c4h packages
        from c4h_agents.agents.discovery import DiscoveryAgent
        from c4h_agents.agents.solution_designer import SolutionDesigner
        from c4h_agents.agents.coder import Coder
        [...other c4h imports...]

    # 5. Finally import service components
    from c4h_services.src.api.service import app
    ```
    2. File Organization:
        ```
        c4h_services/
        ├── src/
        │   ├── api/
        │   │   ├── service.py      # FastAPI implementation
        │   │   └── models.py       # Pydantic models
        │   └── intent/             # Existing intent service
        └── examples/
            └── prefect_runner.py   # CLI and service entry point
        ```

    Design Requirements:
    - Design must comply with docs/Agent_Design_Principles.md
    - Config design must comply with docs/Config_Design_Principles.md
    - All imports must follow c4h_agents import patterns
    - All new code must use absolute imports

    Implementation Requirements:

    1. Add FastAPI API Mode:
        prefect_runner.py changes:
        ```python
        # Imports must use absolute paths
        from c4h_services.src.api.service import app
        from c4h_services.src.api.models import WorkflowRequest
        
        # Add service mode support
        parser.add_argument("-S", "--service", action="store_true")
        parser.add_argument("-P", "--port", type=int, default=8000)
        
        if args.service:
            uvicorn.run(app, host="0.0.0.0", port=args.port)
            return
        ```

    2. API Service Implementation:
        service.py implementation:
        ```python
        from c4h_agents.config import deep_merge
        from c4h_agents.core.project import Project
        from c4h_services.src.api.models import WorkflowRequest
        
        app = FastAPI(
            title="C4H Workflow Service",
            description="API for executing C4H workflows",
            version="0.1.0"
        )
        ```

    3. API Endpoints:
        POST /api/v1/workflow:
          Request:
            - system_config: Dict
            - app_config: Dict (optional)
            - project_path: str
            - intent: Dict
          Response:
            - workflow_id: str
            - status: str
            - storage_path: Optional[str]

        GET /api/v1/workflow/{workflow_id}:
          Response:
            - status: str
            - stages: Dict
            - events: List[Dict]
            - storage_path: Optional[str]

    4. Required Files:

    a. c4h_services/src/api/service.py:
        - Use absolute imports
        - FastAPI app definition
        - Route handlers
        - Config loading using c4h_agents.config
        - Project handling using c4h_agents.core.project

    b. c4h_services/src/api/models.py:
        - Pydantic models
        - No relative imports
        - Map to existing types
        - Input/output validation

    c. c4h_services/examples/prefect_runner.py:
        - Update imports to absolute paths
        - Add service mode
        - FastAPI integration
        - CLI argument updates

    Integration Requirements:
    - Use config.deep_merge for configs
    - Use Project model for projects
    - Use existing storage patterns
    - Maintain workflow patterns
    - Use existing logging

    Constraints:
    - No changes to c4h_agents
    - No relative imports
    - No security yet
    - No new config patterns
    - Preserve CLI functionality
    - Minimize new code

    Return changes in standard JSON format with file_path, type, description, and complete content.


llm_config:
  agents:
    discovery:
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths: 
          - "c4h_services"
          - "docs"
        exclusions: 
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"

    solution_designer:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0


    coder:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      backup_enabled: true

runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      retention:
        max_runs: 10
        max_days: 30
      subdirs:
        - "events"
        - "config"
      error_handling:
        ignore_storage_errors: true
        log_level: "ERROR"
    retry:
      enabled: true
      max_attempts: 3
      initial_delay: 1
      max_delay: 30
      backoff_factor: 2
      retry_on:
        - "overloaded_error"
        - "rate_limit_error"
        - "timeout_error"

logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"