project:
  path: "/Users/jim/src/apps/c4h_ai_dev"
  workspace_root: "workspaces"

intent:
  description: |

intent:
  description: |
        Refactor the BaseLineage implementation in c4h_agents/agents/base_lineage.py to support sending lineage data to multiple backend services including Marquez OpenLineage service, while maintaining the existing file-based storage.

        Current State:
        - The code already has OpenLineage client imports with fallback handling
        - There's an empty `_emit_marquez_event` method stub 
        - File-based lineage tracking is fully implemented
        - The configuration structure doesn't support multiple backends
        - The code has critical functionality for extracting run_id from config in the _extract_run_id method, which must be preserved as-is

        Required Changes:
        1. Update the configuration handling to support this hierarchical structure with multiple backends:
          ```yaml
          llm_config:
            agents:
              lineage:
                enabled: true
                namespace: "c4h_agents"
                backends:
                  file:
                    enabled: true
                    path: "workspaces/lineage"
                  marquez_primary:  # Backend names can be customized as long as they start with 'marquez'
                    enabled: false  # Can be enabled via config
                    url: "http://localhost:5000"
                    auth:
                      type: "api_key"  # none, api_key, bearer
                      api_key: "{ENV:MARQUEZ_API_KEY}"
                    transport:
                      timeout: 30
                      retries: 3
                      backoff: true
                  marquez_secondary:  # Support for multiple Marquez instances
                    enabled: false
                    url: "http://other-server:5000"
                    auth:
                      type: "bearer"
                      token: "{ENV:MARQUEZ_TOKEN}"
                    transport:
                      timeout: 30

            2. Implement the `_emit_marquez_event` method to:
              - Transform LineageEvent into OpenLineage format
              - Support different authentication methods (none, api_key, bearer)
              - Add proper error handling with logging
              - Apply the retry settings from configuration

            3. Update the `track_llm_interaction` method to:
              - Use both backends when they're enabled
              - Ensure failure in one backend doesn't affect the other
              - Maintain backward compatibility if only file backend is configured

            4. Add a method to resolve environment variables in configuration values (e.g., {ENV:MARQUEZ_API_KEY})

            5. Add comprehensive logging for all operations, especially failures
            Constraints:
            - Preserve all existing lineage data generation logic
            - Don't modify the LineageEvent data structure
            - Use the OpenLineage client that's already imported
            - Follow the agent design principles (minimal agent logic, clear boundaries)
            - Ensure graceful degradation if Marquez is unavailable
            - Don't lose any data even if one backend fails

            Implementation should be complete and ready for production use, with proper error handling, retries, and configuration validation.

llm_config:
  agents:
    discovery:
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths:
          - "c4h_services"
          - "c4h_agents"
          - "docs/Agent_Design_Principles.md"
        exclusions:
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"
        
    solution_designer:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219"
      temperature: 1
      extended_thinking:
        enabled: true
        budget_tokens: 32000 # 32k tokens for extended thinking
        
runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      retention:
        max_runs: 10
        max_days: 30
      subdirs:
        - "events"
        - "config"
      error_handling:
        ignore_storage_errors: true
        log_level: "ERROR"
    retry:
      enabled: true
      max_attempts: 3
      initial_delay: 1
      max_delay: 30
      backoff_factor: 2
      retry_on:
        - "overloaded_error"
        - "rate_limit_error"
        - "timeout_error"

logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"