project:
  path: "/Users/jim/src/apps/c4h_ai_dev"
  workspace_root: "workspaces"

intent:
  description: |
      Refactor the BaseLineage implementation in c4h_agents/agents/base_lineage.py to support sending lineage data to a backend  Marquez OpenLineage service, while maintaining the existing file-based storage option.
      Configuration will allow writing the lineage to either file, Marquez, or both, with independent failure if either is not available.

      Current State:
      - The code already has OpenLineage client imports with fallback handling
      - There's an empty `_emit_marquez_event` method stub 
      - File-based lineage tracking is fully implemented
      - The configuration structure doesn't support multiple backends
      - The code has critical functionality for extracting run_id from config in the _extract_run_id method, which must be preserved as-is

      Required Changes:
      1. Update the configuration handling to support this hierarchical structure, and update system config to hvae this default configuration:
        ```yaml
        llm_config:
          agents:
            lineage:
              enabled: true
              namespace: "c4h_agents"
              backends:
                file:
                  enabled: true
                  path: "workspaces/lineage"
                marquez:
                  enabled: true  # Can be enabled via config
                  url: "http://localhost:5005"
                  transport:
                    timeout: 30
                    retries: 3
                    backoff: true
        ```

      2. Implement the `_emit_marquez_event` method to:
        - Take the LineageEvent and format it for Marquez
        - Use the OpenLineage client to send the event to the Marquez service
        - Currently assume no security or authentication is required

      4. Update the `track_llm_interaction` method to:
        - Ensure failure in one backend doesn't affect others
        - Maintain backward compatibility if only file backend is configured
        - Log success/failure for each backend separately

      5. Add comprehensive logging for all operations, especially failures

      CRITICAL REQUIREMENTS:
      - DO NOT MODIFY the `_extract_run_id` method - this method is critical for workflow integration as it properly extracts the run ID from various config locations
      - Ensure the extracted run_id is used consistently across all backends
      - The run_id connects all events within a single workflow run, so maintaining this extraction logic is essential
      - The self.run_id property must be populated early in initialization using the _extract_run_id method
      - Any Marquez event emission must use the same run_id extracted from config

      Constraints:
      - Preserve all existing lineage data generation logic
      - Don't modify the LineageEvent data structure
      - Use the OpenLineage client that's already imported
      - Follow the agent design principles (minimal agent logic, clear boundaries)
      - Ensure graceful degradation if any backend is unavailable
      - Don't lose any data even if multiple backends fail
      - Use consistent naming and logging patterns for all backends

      Implementation should be complete and ready for production use, with proper error handling, retries, and configuration validation.

llm_config:
  agents:
    discovery:
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths:
          - "c4h_services"
          - "c4h_agents"
          - "docs/Agent_Design_Principles.md"
        exclusions:
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"
        
    solution_designer:
      provider: "anthropic"
      model: "claude-3-7-sonnet-20250219"
      temperature: 1
      extended_thinking:
        enabled: true
        budget_tokens: 32000 # 32k tokens for extended thinking
        
runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      subdirs:
        - "events"
        - "config"
      error_handling:
        ignore_storage_errors: true
        log_level: "ERROR"
    retry:
      enabled: true
      max_attempts: 3
      initial_delay: 1
      max_delay: 30
      backoff_factor: 2
      retry_on:
        - "overloaded_error"
        - "rate_limit_error"
        - "timeout_error"

logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"